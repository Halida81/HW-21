[{"/Users/user/Downloads/01-starting-project 3/src/index.js":"1","/Users/user/Downloads/01-starting-project 3/src/App.js":"2","/Users/user/Downloads/01-starting-project 3/src/components/SimpleInput.js":"3","/Users/user/Downloads/01-starting-project 3/src/components/BasicForm.js":"4","/Users/user/Downloads/01-starting-project 3/src/utils/hooks/useInput.js":"5"},{"size":142,"mtime":1616595887000,"results":"6","hashOfConfig":"7"},{"size":299,"mtime":1653898050641,"results":"8","hashOfConfig":"7"},{"size":2909,"mtime":1653903680356,"results":"9","hashOfConfig":"7"},{"size":1773,"mtime":1653829073591,"results":"10","hashOfConfig":"7"},{"size":957,"mtime":1653904450212,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1u14krz",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/user/Downloads/01-starting-project 3/src/index.js",[],["26","27"],"/Users/user/Downloads/01-starting-project 3/src/App.js",["28"],"import BasicForm from './components/BasicForm';\nimport SimpleInput from './components/SimpleInput';\n// import SimpleInput from './components/SimpleInput';\n\n\nfunction App() {\nreturn (\n    <div className=\"app\">\n       {/* <BasicForm/> */}\n      <SimpleInput/>\n      </div>\n  );\n}\n\nexport default App;\n","/Users/user/Downloads/01-starting-project 3/src/components/SimpleInput.js",["29"],"// import { useState, useRef} from \"react\";\n\n// const SimpleInput = (props) => {\n//   const [enteredName, setEnteredName] = useState('')\n\n// const formSubmitHandler = (e )=>{\n//   e.preventDefault()\n\n//   if(enteredName.trim() ===''){\n//     setIsValid(true)\n//   }\n//   setIsValid(false)\n// return\n// const enteredInputName =  inputRef.current.value\n//  }\n\n//  const nameInputClasses= isValid ? 'form-control invalid' : 'form-control'\n\n//   return (\n//     <form onSubmit={formSubmitHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input  type='text' id='name' onChange={changeInputHandler} />\n//       </div>\n//       {isValid && <p>Name must not be empty</p> }\n//       <div className=\"form-actions\">\n//         <button>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput; //VERSION_1\n\nimport React, { useState } from \"react\";\nimport { useInput } from \"../utils/hooks/useInput\";\nconst SimpleInput = (props) => {\n  // alias\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurChangeHandler,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurChangeHandler,\n  } = useInput((value) => value.includes(\"@\"));\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName);\n  };\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={enteredName}\n          onChange={nameChangeHandler}\n          onBlur={nameBlurChangeHandler}\n        />\n        {nameInputHasError && <p>Name must not be empty</p>}\n        <div className={emailInputClasses}>\n          <label htmlFor=\"name\">Your email</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={enteredEmail}\n            onChange={emailChangeHandler}\n            onBlur={emailBlurChangeHandler}\n          />\n          {emailInputHasError && <p>email is wrong</p>}\n        </div>\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\nexport default SimpleInput;\n","/Users/user/Downloads/01-starting-project 3/src/components/BasicForm.js",[],"/Users/user/Downloads/01-starting-project 3/src/utils/hooks/useInput.js",["30"],"import { useReducer, useState } from \"react\";\n\nconst initState = {\n  value: \"\",\n  isBlur: false,\n};\n\nconst inputReducer = (state, action) => { \n  switch (action.type) {\n    case \"CHANGE_VALUE\":\n      return {\n        ...state,\n        value: action.value,\n      };\n    case \"ON_BLUR\":\n      return {\n        ...state,\n        isBlur: action.isBlur,\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\nexport function useInput(validateState) {\n  const [state, dispatch] = useReducer(inputReducer, initState);\n\n  const valueIsValid = validateState(state.value);\n  const hasError = !valueIsValid && state.isBlur;\n\n  const valueChangeHandler = (e) => {\n    dispatch({ type: \"CHANGE_VALUE\", value: e.target.value });\n  };\n\n  const inputBlurHandler = () => {\n    dispatch({ type: \"ON_BLUR\", isBlur: true });\n  };\n\n  return {\n    value: state.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n  };\n}\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":17},{"ruleId":"35","severity":1,"message":"39","line":35,"column":17,"nodeType":"37","messageId":"38","endLine":35,"endColumn":25},{"ruleId":"35","severity":1,"message":"39","line":1,"column":22,"nodeType":"37","messageId":"38","endLine":1,"endColumn":30},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'BasicForm' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]